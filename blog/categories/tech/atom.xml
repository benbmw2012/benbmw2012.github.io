<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | A2BGeek's Blog]]></title>
  <link href="http://a2bgeek.me/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://a2bgeek.me/"/>
  <updated>2014-05-05T11:23:14+08:00</updated>
  <id>http://a2bgeek.me/</id>
  <author>
    <name><![CDATA[A2BGeek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[快递100API使用讲解]]></title>
    <link href="http://a2bgeek.me/blog/2014/04/14/kuai-di-100apishi-yong-jiang-jie.html/"/>
    <updated>2014-04-14T09:24:28+08:00</updated>
    <id>http://a2bgeek.me/blog/2014/04/14/kuai-di-100apishi-yong-jiang-jie</id>
    <content type="html"><![CDATA[<p>今天主要讲解的是如何通过api.kuaidi100.com获得物流单号的跟踪信息。</p>

<p>其实说来很简单，就是通过向指定的地址发送请求，即可返回如JSON、XML等格式的跟综结果。</p>

<h2>应用场景</h2>

<pre><code>1. 电商网站用户打开“我的订单”时调用此API显示结果
2. 物流系统对帐前调用此API查一次所有运单的签收状态
</code></pre>

<h2>是否需要授权</h2>

<p>是，需要到<a href="http://www.kuaidi100.com/openapi/applyapi.shtml">快递查询API申请地址</a>申请。</p>

<h2>API请求地址</h2>

<p><a href="http://api.kuaidi100.com/api?id=">http://api.kuaidi100.com/api?id=</a>[]&amp;com=[]&amp;nu=[]&amp;valicode=[]&amp;show=[0|1|2|3]&amp;muti=[0|1]&amp;order=[desc|asc]</p>

<h2>参数说明</h2>

<table class="tab_use_child" cellspacing="0">
    <tbody>
        <tr>
            <th width="90" scope="col">名称</th>
            <th width="90" scope="col">类型</th>
            <th width="100" scope="col">是否必需</th>
            <th style="text-align:left;" scope="col"> 　　描述</th>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>id</td>
            <td> String</td>
            <td>是</td>
            <td style="text-align:left;">
            身份授权key，请
            <a target="_blank" href="http://a2bgeek.me/openapi/applyapi.shtml">快递查询接口</a>
            进行申请（大小写敏感）
            </td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>com</td>
            <td>String</td>
            <td>是</td>
            <td style="text-align:left;">
            要查询的快递公司代码，不支持中文，对应的公司代码见
            <br>
            《
            <a class="aco" target="_blank" href="http://code.google.com/p/kuaidi-api/wiki/Open_API_API_URL">API URL 所支持的快递公司及参数说明</a>
            》和《
            <a class="aco" target="_blank" href="http://code.google.com/p/kuaidi-api/wiki/Open_API_For_International_Express">支持的国际类快递及参数说明</a>
            》。
            <br>
            如果找不到您所需的公司，请发邮件至
            <a class="aco" href="mailto:kuaidi@kingdee.com"> kuaidi@kingdee.com </a>
            咨询（大小写不敏感）
            </td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>nu</td>
            <td> String</td>
            <td>是</td>
            <td style="text-align:left;">要查询的快递单号，请勿带特殊符号，不支持中文（大小写不敏感）</td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>valicode</td>
            <td>String</td>
            <td>是</td>
            <td style="text-align:left;">已弃用字段，无意义，请忽略。</td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>show</td>
            <td> String</td>
            <td>是</td>
            <td style="text-align:left;">
            返回类型：
            <br>
            0：返回json字符串，
            <br>
            1：返回xml对象，
            <br>
            2：返回html对象，
            <br>
            3：返回text文本。
            <br>
            如果不填，默认返回json字符串。
            </td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>muti</td>
            <td> String</td>
            <td>是</td>
            <td style="text-align:left;">
            返回信息数量：
            <br>
            1:返回多行完整的信息，
            <br>
            0:只返回一行信息。
            <br>
            不填默认返回多行。
            <br>
            </td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>order</td>
            <td> String</td>
            <td>是</td>
            <td style="text-align:left;">
            排序：
            <br>
            desc：按时间由新到旧排列，
            <br>
            asc：按时间由旧到新排列。
            <br>
            不填默认返回倒序（大小写不敏感）
            </td>
        </tr>
    </tbody>
</table>


<h2>返回结果</h2>

<table class="tab_use_child" cellspacing="0">
    <tbody>
        <tr style="background-color: rgb(255, 255, 255);">
            <th width="260" scope="col">字段名称</th>
            <th style="text-align:left;" scope="col">　　字段含义</th>
        </tr>
        <tr>
            <td>com</td>
            <td style="text-align:left;">物流公司编号</td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>nu</td>
            <td style="text-align:left;">物流单号</td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>time</td>
            <td style="text-align:left;">每条跟踪信息的时间</td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>context</td>
            <td style="text-align:left;">每条跟综信息的描述</td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>state</td>
            <td style="text-align:left;">
            快递单当前的状态 ：　
            <br>
            0：在途，即货物处于运输过程中；
            <br>
            1：揽件，货物已由快递公司揽收并且产生了第一条跟踪信息；
            <br>
            2：疑难，货物寄送过程出了问题；
            <br>
            3：签收，收件人已签收；
            <br>
            4：退签，即货物由于用户拒签、超区等原因退回，而且发件人已经签收；
            <br>
            5：派件，即快递正在进行同城派件；
            <br>
            6：退回，货物正处于退回发件人的途中；
            <br>
            该状态还在不断完善中，若您有更多的参数需求，欢迎发邮件至
            <a class="aco ff" href="mailto:kuaidi@kingdee.com"> kuaidi@kingdee.com</a>
            提出。
            </td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>status</td>
            <td style="text-align:left;">
            查询结果状态：
            <br>
            0：物流单暂无结果，
            <br>
            1：查询成功，
            <br>
            2：接口出现异常，
            </td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>message</td>
            <td style="text-align:left;">无意义，请忽略</td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>condition</td>
            <td style="text-align:left;">无意义，请忽略</td>
        </tr>
        <tr style="background-color: rgb(255, 255, 255);">
            <td>ischeck</td>
            <td style="text-align:left;">无意义，请忽略</td>
        </tr>
    </tbody>
</table>


<h2>返回示例</h2>

<h3>xml格式</h3>

<p><code>xml
&lt;xml&gt;
&lt;message&gt;ok&lt;/message&gt;
&lt;nu&gt;1200722815552&lt;/nu&gt;
&lt;ischeck&gt;1&lt;/ischeck&gt;
&lt;com&gt;yunda&lt;/com&gt;
&lt;status&gt;1&lt;/status&gt;
&lt;condition&gt;F00&lt;/condition&gt;
&lt;data&gt;
&lt;time&gt;2013-03-03 19:24:48&lt;/time&gt;
&lt;context&gt;江苏泗阳县公司:进行揽件扫描&lt;/context&gt;
&lt;/data&gt;
&lt;data&gt;
&lt;time&gt;2013-03-03 19:25:10&lt;/time&gt;
&lt;context&gt;江苏泗阳县公司:进行发出扫描，将发往：江苏淮安中转站&lt;/context&gt;
&lt;/data&gt;
&lt;data&gt;
&lt;time&gt;2013-03-03 21:44:47&lt;/time&gt;
&lt;context&gt;江苏淮安中转站:快件进入分拨中心进行分拨&lt;/context&gt;
&lt;/data&gt;
&lt;data&gt;
&lt;time&gt;2013-03-04 03:22:44&lt;/time&gt;
&lt;context&gt;江苏南京中转站:从站点发出，本次转运目的地：江苏南京栖霞区仙林公司&lt;/context&gt;
&lt;/data&gt;
&lt;data&gt;
&lt;time&gt;2013-03-04 08:25:03&lt;/time&gt;
&lt;context&gt;江苏南京栖霞区仙林公司:到达目的地网点，快件将很快进行派送&lt;/context&gt;
&lt;/data&gt;
&lt;data&gt;
&lt;time&gt;2013-03-04 13:09:58&lt;/time&gt;
&lt;context&gt;江苏南京栖霞区仙林公司:进行派件扫描；派送业务员：孙；（&lt;/context&gt;
&lt;/data&gt;
&lt;data&gt;
&lt;time&gt;2013-03-04 13:19:47&lt;/time&gt;
&lt;context&gt;江苏南京栖霞区仙林公司:快件已被 图片 签收&lt;/context&gt;
&lt;/data&gt;
&lt;state&gt;3&lt;/state&gt;
&lt;/xml&gt;
</code></p>

<h3>json格式</h3>

<p>``` json
{&ldquo;message&rdquo;:&ldquo;ok&rdquo;,&ldquo;status&rdquo;:&ldquo;1&rdquo;,&ldquo;state&rdquo;:&ldquo;3&rdquo;,&ldquo;data&rdquo;:</p>

<pre><code>[{"time":"2012-07-07 13:35:14","context":"客户已签收"},
    {"time":"2012-07-07 09:10:10","context":"离开 [北京石景山营业厅] 派送中，递送员[温]，电话[]"},
    {"time":"2012-07-06 19:46:38","context":"到达 [北京石景山营业厅]"},
    {"time":"2012-07-06 15:22:32","context":"离开 [北京石景山营业厅] 派送中，递送员[温]，电话[]"},
    {"time":"2012-07-06 15:05:00","context":"到达 [北京石景山营业厅]"},
    {"time":"2012-07-06 13:37:52","context":"离开 [北京_同城中转站] 发往 [北京石景山营业厅]"},
    {"time":"2012-07-06 12:54:41","context":"到达 [北京_同城中转站]"},
    {"time":"2012-07-06 11:11:03","context":"离开 [北京运转中心驻站班组] 发往 [北京_同城中转站]"},
    {"time":"2012-07-06 10:43:21","context":"到达 [北京运转中心驻站班组]"},
    {"time":"2012-07-05 21:18:53","context":"离开 [福建_厦门支公司] 发往 [北京运转中心_航空]"},
    {"time":"2012-07-05 20:07:27","context":"已取件，到达 [福建_厦门支公司]"}
]} 
</code></pre>

<p>```</p>

<blockquote><p>好了，今天就到这里，欢迎拍砖。查快递使用这个api还是不错的，网址是<a href="http://www.kuaidi100.com/" target="_blank">快递查询</a>。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小米系统APP初体验]]></title>
    <link href="http://a2bgeek.me/blog/2014/04/13/xiao-mi-xi-tong-appchu-ti-yan.html/"/>
    <updated>2014-04-13T15:38:58+08:00</updated>
    <id>http://a2bgeek.me/blog/2014/04/13/xiao-mi-xi-tong-appchu-ti-yan</id>
    <content type="html"><![CDATA[<p>今天来体验一下小米系统app，小米系统是一个超级app，集成了miui桌面、miui拨号、miui联系人、miui短信和小米云服务。下面来体验一下小米系统。</p>

<h2>miui桌面</h2>

<p><img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_launcher0.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_launcher1.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_launcher2.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_launcher3.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_launcher4.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_launcher5.png" width="320" height="480"/></p>

<h2>miui锁屏</h2>

<p><img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_lock0.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_lock1.png" width="320" height="480"/></p>

<h2>miui拨号和联系人</h2>

<p><img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_contact0.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_contact1.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_contact2.png" width="320" height="480"/></p>

<h2>miui短信</h2>

<p><img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_sms0.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_sms1.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_sms2.png" width="320" height="480"/></p>

<h2>小米云服务</h2>

<p><img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_cloud0.png" width="320" height="480"/></p>

<h2>小米主题商店</h2>

<p><img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_theme0.png" width="320" height="480"/>
<img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_theme1.png" width="320" height="480"/></p>

<h2>小米应用商店</h2>

<p><img src="http://a2bgeekblog.qiniudn.com/image/png/miuiapp/miui_store0.png" width="320" height="480"/></p>

<blockquote><p>好了，今天就到这里，欢迎拍砖。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BeautifulSoup实战]]></title>
    <link href="http://a2bgeek.me/blog/2014/04/09/beautifulsoupshi-zhan.html/"/>
    <updated>2014-04-09T09:08:31+08:00</updated>
    <id>http://a2bgeek.me/blog/2014/04/09/beautifulsoupshi-zhan</id>
    <content type="html"><![CDATA[<p>最近有个项目要用天气数据，看了一些天气网站，决定从<code>中国天气网</code>上抓数据，<code>python</code>抓数据的框架我知道的不多，只听过<code>BeautifulSoup</code>，下面记录一下使用<code>BeautifulSoup</code>抓取数据的全过程。<code>BeautifulSoup</code>的文档见<a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">BeautifulSoup官方文档</a>。</p>

<h2>这里大概介绍一下<code>BeautifulSoup</code>的用法，它和javascript的dom一样，把html文档看做一棵树。</h2>

<ul>
<li><p>可以用下面的代码取得根节点：
<code>python
from bs4 import BeautifulSoup
import urllib
rawdata = urllib.urlopen("http://xxx.xxx.xx")
soup = BeautifulSoup(rawdata)
</code>
<code>soup</code>就是根节点了，有了这个根节点就能遍历文档树了。</p></li>
<li><p>find可以快速得到某一个或一簇标签：
<code>python
head = soup.find('head')
</code>
可以得到
<code>html
&lt;head&gt;
  &lt;title&gt;...&lt;title&gt;
  &lt;style&gt;...&lt;style&gt;
&lt;/head&gt;
</code>
也可以加上id的限制:
<code>python
soup.find(id="link3")
</code></p></li>
<li>find_all可以有选择地得到一些标签：
``` python
soup.find_all(&lsquo;a&rsquo;)

<h1>[<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,</h1>

<h1><a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,</h1>

<h1><a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]</h1>

<p>```</p></li>
<li><code>.</code>也很常用：
``` python
soup.title

<h1>可以得到<title>The Dormouse&rsquo;s story</title></h1>

soup.title.name

<h1>可以得到标签名</h1>

soup.title.string

<h1>可以得到标签之间的文本</h1>

soup.p[&lsquo;class&rsquo;]

<h1>可以得到p标签的class属性</h1>

<p>```</p></li>
<li>contents也比较常用：
``` python
soup.body.contents

<h1>是一个list，包括了body的所有子节点，既有tag也有文本。</h1>

```

<h2>下面介绍抓取中国天气网数据的过程。</h2>

首先打开网页<a href="http://www.weather.com.cn/weather/101160101.shtml">兰州天气</a>，再打开firebug找到我们需要抓取的部分。如图所示：
<img src="http://a2bgeekblog.qiniudn.com/image/png/beatifulsoup.png" alt="" />，其中<code>id="7d"</code>的<code>div</code>就是我们要抓取的部分。下面上代码：
``` python
tag7d = soup.find(id = &ldquo;7d&rdquo;)

<h1>得到id=&ldquo;7d"的div</h1>

tagweatherYubaoBox = tag7d.contents[3]

<h1>得到class=&ldquo;weatherYubaoBox"的div</h1>

resultset = [tagweatherYubaoBox.contents[5].find_all(&ldquo;a&rdquo;), tagweatherYubaoBox.contents[9].find_all(&ldquo;a&rdquo;), tagweatherYubaoBox.contents[13].find_all(&ldquo;a&rdquo;)]

<h1>这里我只想取当天、明天、后天的天气，也就是class=&ldquo;yuBaoTable"的前三个table，接下来就可以循环去数据了。</h1>

result = []
for item in resultset:
  tmp_dict = {}
  tmp_dict[&ldquo;date&rdquo;] = item[0].string
  tmp_dict[&ldquo;imgurl&rdquo;] = &lsquo;&rsquo;.join([&ldquo;<a href="http://www.weather.com.cn">http://www.weather.com.cn</a>&rdquo;, item[1].contents[1][&ldquo;src&rdquo;]])
  tmp_dict[&ldquo;weather&rdquo;] = item[2].string
  if len(item) == 6:

<h1>中国天气网的数据在6点以后就没有白天的数据了，所以这里判断了一下。</h1>

<pre><code>  tmp_dict["low"] = ' '.join([u"夜间", item[3].contents[1].contents[0], item[3].contents[1].contents[1].string])
</code></pre>

  else:
      tmp_dict[&ldquo;high&rdquo;] = &lsquo; &rsquo;.join([u"白天", item[3].contents[1].contents[0], item[3].contents[1].contents[1].string])
      tmp_dict[&ldquo;low&rdquo;] = &lsquo; &rsquo;.join([u"夜间", item[8].contents[1].contents[0], item[8].contents[1].contents[1].string])
  result.append(tmp_dict)
```
最后为大家提供一个我吐血整理的城市名称和城市编号的对应关系，请<a href="http://a2bgeekblog.qiniudn.com/file/py/data.py">点击</a>下载。

<blockquote><p>好了今天就到这里，欢迎拍砖。</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建nginx+tornado+supervisor+mongodb环境]]></title>
    <link href="http://a2bgeek.me/blog/2014/03/27/da-jian-nginx-plus-tornado-plus-supervisorhuan-jing.html/"/>
    <updated>2014-03-27T09:52:34+08:00</updated>
    <id>http://a2bgeek.me/blog/2014/03/27/da-jian-nginx-plus-tornado-plus-supervisorhuan-jing</id>
    <content type="html"><![CDATA[<p>最近做一个项目需要用到传说中的<code>云计算</code>，云计算是什么？打个比方，回到电气时代，以前是自家买爱迪生的直流发电机给自家发电，后来有了交流电，变成了发电厂发电然后供电给各家，这个发电厂其实就是电气时代的云平台，有了这个云平台，就降低了各家的用电成本，能让越来越多的人用上电。</p>

<p>作为一个程序员，大家一定听说过百度的bae，新浪的sae，谷歌的gae，这些其实就是云计算的一种表现形式。某大公司有一大堆服务器，怎么开放给小公司或者个人使用呢？首先要把基本的开发环境搭建好，然后弄一套自家的开发框架出来，开发者只需要用git把本地的代码push上去就可以，这就是所谓的<code>应用引擎</code>。云计算还有一种表现形式就是像阿里云服务器、谷歌的compute engine这种，直接给你一台Linux服务器。我个人还是比较偏向第二种，用起来比较自由。</p>

<p>今天来介绍一下在一台装了centos的服务器上搭建python web环境。</p>

<h2>安装nginx服务器，它负责为tornado做负载均衡</h2>

<ul>
<li>在命令行执行如下命令：
<code>bash
vim /etc/yum.repos.d/nginx.repo
</code></li>
<li>填写如下文本内容：
<code>bash
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=0
enabled=1
</code></li>
<li>在命令行执行yum命令安装nginx：
<code>bash
yum install nginx
</code></li>
<li>配置防火墙，允许80端口：
<code>bash
iptables -I INPUT -p tcp --dport 80 -j ACCEPT
</code></li>
<li>启动nginx：
<code>bash
/etc/init.d/nginx start
</code>

<h2>安装setuptools</h2></li>
<li>在命令行执行如下命令：
<code>bash
wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py -O - | python
</code>

<h2>安装tornado</h2></li>
<li>首先安装pip，在命令行执行如下命令：
<code>bash
sudo yum install python-pip
</code></li>
<li>然后安装tornado，在命令行执行如下命令：
<code>bash
sudo pip install tornado
</code>

<h2>安装supervisor</h2></li>
<li>在命令行执行如下命令：
<code>bash
sudo pip install supervisor
</code>

<h2>安装mongodb</h2></li>
<li>在<a href="http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/RPMS/">mongodb官方站点</a>下载mongo-10gen-server-2.4.9-mongodb_1.x86_64.rpm和mongo-10gen-2.4.9-mongodb_1.x86_64.rpm，然后使用sudo rpm -ivh安装即可。</li>
</ul>


<h2>安装pymongo</h2>

<p>当然也可以选择mongoengine。
&ndash; 在命令行执行如下命令：
<code>bash
sudo pip install pymongo
</code></p>

<h2>生产环境的配置</h2>

<ul>
<li>首先是nginx的配置，nginx在这里主要的作用是做负载均衡，把请求分配给多个tornado进程。nginx的配置文件如下：
<code>bash
http {
  charset utf-8;
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  keepalive_timeout  65;
  proxy_read_timeout 200;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  gzip on;
  gzip_min_length 1000;
  gzip_proxied any;
  gzip_types text/plain text/css text/xml
             application/x-javascript application/xml
             application/atom+xml text/javascript;
  proxy_next_upstream error;
  upstream a2bgeektest {
      server 127.0.0.1:8001;
      server 127.0.0.0:8002;
      server 127.0.0.1:8003;
  }
  server {
      listen       80;
      client_max_body_size 50M;
      location ^~ /static/ {
          root /srv/http/static;
          if ($query_string) {
              expires max;
          }
      }
      location / {
          proxy_pass_header Server;
          proxy_set_header Host $http_host;
          proxy_redirect off;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_pass http://a2bgeektest;
      }
  }
}
</code></li>
<li>接下来使用supervisor启动并管理tornado进程
在命令行使用vim新建并编辑一个配置文件/etc/supervisor/conf.d/test.conf，内容如下：
<code>bash
[program:a2bgeektest]
command = python /srv/http/a2bgeektest/tornadoapp.py --port=80%(process_num)02d ;
autorestart = true
autostart = true
numprocs = 3
process_name = %(program_name)s-%(process_num)02d
stdout_logfile = /var/log/a2bgeektest/tornadoapptest.log
redirect_stderr = true
</code>
然后在命令行下执行：
<code>bash
sudo supervisord -c /etc/supervisor/supervisord.conf
sudo supervisorctl reload
sudo supervisorctl start all
</code>
就可以启动3个同样的tornado进程。

<blockquote><p>好了，今天就到这里，欢迎拍砖。</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[消息队列RabbitMQ分享]]></title>
    <link href="http://a2bgeek.me/blog/2014/03/13/xiao-xi-dui-lie-rabbitmqfen-xiang.html/"/>
    <updated>2014-03-13T18:52:31+08:00</updated>
    <id>http://a2bgeek.me/blog/2014/03/13/xiao-xi-dui-lie-rabbitmqfen-xiang</id>
    <content type="html"><![CDATA[<p>最近为我维护的微信公众号添加功能，添加之后发现返回速度变慢了，导致在5秒内无法给用户返回消息。遇到这种情况该怎么办呢？答案是把耗时的操作开线程做异步处理，不过大神给了我指点，没错，就是使用消息队列。</p>

<p>消息队列顾名思义是一个队列，先进先出，可以把需要异步处理的消息（常常表现为字符串）先存到里面慢慢处理。</p>

<p>我选用的消息队列是RabbitMQ，可以点击<a href="https://www.rabbitmq.com">RabbitMQ官方网站</a>查看文档。RabbitMQ是C/S结构，就像MySQL一样，提供了很多编程语言的客户端，因为我用的是python，所以使用了pika这个包。</p>

<p>RabbitMQ使用的一般情形就是有几个receiver一直在监听消息队列，然后来自WEB服务器的需要先返回后处理数据的请求被不断地放入消息队列，reveiver们轮流去处理，如下图：<img src="https://www.rabbitmq.com/img/tutorials/python-two.png" alt="" /></p>

<p>下面上代码：</p>

<p>send.py
``` python</p>

<h1>!/usr/bin/env python</h1>

<p>import pika
import sys</p>

<p>connection = pika.BlockingConnection(pika.ConnectionParameters(</p>

<pre><code>host='localhost'))
</code></pre>

<p>channel = connection.channel()</p>

<p>channel.queue_declare(queue=&lsquo;task_queue&rsquo;, durable=True)</p>

<p>message = &lsquo; &rsquo;.join(sys.argv[1:]) or &ldquo;Hello World!&rdquo;
channel.basic_publish(exchange=&lsquo;&rsquo;,</p>

<pre><code>          routing_key='task_queue',
          body=message,
          properties=pika.BasicProperties(
         delivery_mode = 2, # make message persistent
          ))
</code></pre>

<p>print &ldquo; [x] Sent %r&rdquo; % (message,)
connection.close()
<code>
receiver.py
</code> python</p>

<h1>!/usr/bin/env python</h1>

<p>import pika
import time</p>

<p>connection = pika.BlockingConnection(pika.ConnectionParameters(</p>

<pre><code>host='localhost'))
</code></pre>

<p>channel = connection.channel()</p>

<p>channel.queue_declare(queue=&lsquo;task_queue&rsquo;, durable=True)
print &lsquo; [*] Waiting for messages. To exit press CTRL+C&rsquo;</p>

<p>def callback(ch, method, properties, body):</p>

<pre><code>print " [x] Received %r" % (body,)
time.sleep( body.count('.') )
print " [x] Done"
ch.basic_ack(delivery_tag = method.delivery_tag)
</code></pre>

<p>channel.basic_qos(prefetch_count=1)
channel.basic_consume(callback,</p>

<pre><code>          queue='task_queue')
</code></pre>

<p>channel.start_consuming()
```
我就是参考这段代码去优化我的异步处理的。</p>

<blockquote><p>好了，今天就到这里，欢迎拍砖。</p></blockquote>
]]></content>
  </entry>
  
</feed>
